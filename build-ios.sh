#!/bin/bash

# KuponCepte iOS Build Script
# Bu script iOS IPA dosyasƒ± olu≈üturur ve test i√ßin hazƒ±rlar

set -e  # Hata durumunda script'i durdur

# Renkli √ßƒ±ktƒ± i√ßin
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logo ve ba≈ülƒ±k
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë          KuponCepte iOS Builder       ‚ïë"
echo "‚ïë         Test Build Generator         ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Mevcut dizini kontrol et
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Hata: package.json bulunamadƒ±. L√ºtfen mobile dizininde √ßalƒ±≈ütƒ±rƒ±n.${NC}"
    exit 1
fi

# macOS kontrol√º
if [[ "$OSTYPE" != "darwin"* ]]; then
    echo -e "${RED}‚ùå iOS build sadece macOS'ta yapƒ±labilir.${NC}"
    exit 1
fi

# Node.js ve npm kontrol et
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js y√ºkl√º deƒüil. L√ºtfen Node.js'i y√ºkleyin.${NC}"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo -e "${RED}‚ùå npm y√ºkl√º deƒüil. L√ºtfen npm'i y√ºkleyin.${NC}"
    exit 1
fi

# Xcode kontrol et
if ! command -v xcodebuild &> /dev/null; then
    echo -e "${RED}‚ùå Xcode y√ºkl√º deƒüil. L√ºtfen Xcode'u App Store'dan y√ºkleyin.${NC}"
    exit 1
fi

# EAS CLI kontrol et ve gerekirse y√ºkle
if ! command -v eas &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  EAS CLI bulunamadƒ±. Y√ºkleniyor...${NC}"
    npm install -g @expo/eas-cli
fi

# Expo CLI kontrol et
if ! command -v expo &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Expo CLI bulunamadƒ±. Y√ºkleniyor...${NC}"
    npm install -g @expo/cli
fi

echo -e "${BLUE}üìã Build √∂ncesi kontroller...${NC}"

# Dependencies y√ºkle
echo -e "${YELLOW}üì¶ Dependencies kontrol ediliyor...${NC}"
npm install

# CocoaPods y√ºkle/g√ºncelle
if [ -f "ios/Podfile" ]; then
    echo -e "${YELLOW}üç´ CocoaPods g√ºncelleniyor...${NC}"
    cd ios
    pod install --repo-update
    cd ..
fi

# Cache temizle
echo -e "${YELLOW}üßπ Cache temizleniyor...${NC}"
npm run clear || npx expo start --clear --no-dev &
sleep 2
pkill -f "expo start" || true

# Build klas√∂rlerini temizle
echo -e "${YELLOW}üóëÔ∏è  Eski build dosylarƒ± temizleniyor...${NC}"
rm -rf ios/build/
rm -rf ios/DerivedData/
rm -rf node_modules/.cache/

# Xcode derived data temizle
echo -e "${YELLOW}üßπ Xcode cache temizleniyor...${NC}"
rm -rf ~/Library/Developer/Xcode/DerivedData/KuponCepte-*

# EAS login kontrol et
echo -e "${BLUE}üîê Expo hesabƒ± kontrol ediliyor...${NC}"
if ! eas whoami &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Expo hesabƒ±nƒ±za giri≈ü yapmanƒ±z gerekiyor.${NC}"
    echo -e "${BLUE}üí° 'expo login' komutu ile giri≈ü yapabilirsiniz.${NC}"
    read -p "≈ûimdi giri≈ü yapmak ister misiniz? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        expo login
    else
        echo -e "${RED}‚ùå Build i√ßin Expo hesabƒ±na giri≈ü gereklidir.${NC}"
        exit 1
    fi
fi

# EAS projesi kontrol et
if [ ! -f "eas.json" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  eas.json bulunamadƒ±. EAS projesi yapƒ±landƒ±rƒ±lƒ±yor...${NC}"
    eas init
fi

# Build profili se√ß
echo -e "${BLUE}üéØ Build profili se√ßin:${NC}"
echo "1) Development Build (Hƒ±zlƒ±, test i√ßin)"
echo "2) Preview Build (AdHoc distribution, test i√ßin)"  
echo "3) Production Build (App Store i√ßin)"

read -p "Se√ßiminiz (1-3): " -n 1 -r
echo

case $REPLY in
    1)
        BUILD_PROFILE="development"
        echo -e "${GREEN}‚úÖ Development build se√ßildi${NC}"
        ;;
    2)
        BUILD_PROFILE="preview" 
        echo -e "${GREEN}‚úÖ Preview build se√ßildi${NC}"
        ;;
    3)
        BUILD_PROFILE="production"
        echo -e "${GREEN}‚úÖ Production build se√ßildi${NC}"
        ;;
    *)
        BUILD_PROFILE="preview"
        echo -e "${YELLOW}‚ö†Ô∏è  Ge√ßersiz se√ßim, Preview build kullanƒ±lacak${NC}"
        ;;
esac

# Build tipi se√ß
echo -e "${BLUE}üì± Build tipi se√ßin:${NC}"
echo "1) Simulator Build (M1/M2 Mac i√ßin, en hƒ±zlƒ±)"
echo "2) Device Build (Ger√ßek cihaz i√ßin)"

read -p "Se√ßiminiz (1-2): " -n 1 -r
echo

case $REPLY in
    1)
        BUILD_TYPE="simulator"
        echo -e "${GREEN}‚úÖ Simulator build se√ßildi${NC}"
        ;;
    2)
        BUILD_TYPE="device"
        echo -e "${GREEN}‚úÖ Device build se√ßildi${NC}"
        ;;
    *)
        BUILD_TYPE="simulator"
        echo -e "${YELLOW}‚ö†Ô∏è  Ge√ßersiz se√ßim, Simulator build kullanƒ±lacak${NC}"
        ;;
esac

# IPA build y√∂ntemi se√ßeneƒüi (sadece device build i√ßin)
if [ "$BUILD_TYPE" = "device" ]; then
    echo -e "${BLUE}üî® Build y√∂ntemi se√ßin:${NC}"
    echo "1) Lokal build (Bilgisayarƒ±nƒ±zda, Xcode gerekli)"
    echo "2) EAS cloud build (Expo sunucularƒ±nda, √∂nerilen)"

    read -p "Se√ßiminiz (1-2): " -n 1 -r
    echo

    case $REPLY in
        1)
            BUILD_METHOD="local"
            echo -e "${GREEN}‚úÖ Lokal build se√ßildi${NC}"
            
            # Apple Developer hesabƒ± kontrol
            echo -e "${YELLOW}‚ö†Ô∏è  Lokal build i√ßin Apple Developer hesabƒ± ve sertifikalar gereklidir.${NC}"
            echo -e "${BLUE}üí° Xcode'da hesabƒ±nƒ±zƒ± eklediƒüinizden emin olun.${NC}"
            ;;
        2)
            BUILD_METHOD="cloud"
            echo -e "${GREEN}‚úÖ EAS cloud build se√ßildi${NC}"
            ;;
        *)
            BUILD_METHOD="cloud"
            echo -e "${YELLOW}‚ö†Ô∏è  Ge√ßersiz se√ßim, EAS cloud build kullanƒ±lacak${NC}"
            ;;
    esac
else
    BUILD_METHOD="local"  # Simulator i√ßin her zaman lokal
fi

# Build i≈ülemini ba≈ülat
echo -e "${BLUE}üöÄ iOS build i≈ülemi ba≈ülatƒ±lƒ±yor...${NC}"

if [ "$BUILD_TYPE" = "simulator" ]; then
    # Simulator build (her zaman lokal)
    echo -e "${YELLOW}üî® iOS Simulator build ba≈ülatƒ±lƒ±yor...${NC}"
    
    # Prebuild i≈ülemi
    npx expo prebuild --platform ios --clean
    
    # Team ID ayarla
    TEAM_ID="5GYC45NJT7"
    echo -e "${GREEN}‚úÖ Team ID ayarlandƒ±: $TEAM_ID${NC}"
    
    # Xcode build for simulator
    cd ios
    echo -e "${YELLOW}üî® Simulator i√ßin build yapƒ±lƒ±yor...${NC}"
    xcodebuild -workspace KuponCepte.xcworkspace \
               -scheme KuponCepte \
               -configuration Release \
               -sdk iphonesimulator \
               -derivedDataPath ./build \
               -allowProvisioningUpdates \
               DEVELOPMENT_TEAM=$TEAM_ID \
               -quiet
    cd ..
    
    # App dosyasƒ±nƒ± bul
    APP_PATH="ios/build/Build/Products/Release-iphonesimulator/KuponCepte.app"
    if [ -d "$APP_PATH" ]; then
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        OUTPUT_NAME="KuponCepte_${BUILD_PROFILE}_simulator_${TIMESTAMP}.app"
        cp -r "$APP_PATH" "./$OUTPUT_NAME"
        echo -e "${GREEN}‚úÖ Simulator app ba≈üarƒ±yla olu≈üturuldu: $OUTPUT_NAME${NC}"
    else
        echo -e "${RED}‚ùå Simulator app dosyasƒ± bulunamadƒ±: $APP_PATH${NC}"
        exit 1
    fi

elif [ "$BUILD_METHOD" = "local" ]; then
    # Lokal device build
    echo -e "${YELLOW}üî® Lokal iOS device build ba≈ülatƒ±lƒ±yor...${NC}"
    
    # Prebuild i≈ülemi
    npx expo prebuild --platform ios --clean
    
    # Team ID statik olarak ayarla
    TEAM_ID="5GYC45NJT7"
    echo -e "${GREEN}‚úÖ Team ID ayarlandƒ±: $TEAM_ID${NC}"
    
    # Export method'unu profile'a g√∂re ayarla
    if [ "$BUILD_PROFILE" = "production" ]; then
        EXPORT_METHOD="app-store"
    elif [ "$BUILD_PROFILE" = "preview" ]; then
        EXPORT_METHOD="ad-hoc"
    else
        EXPORT_METHOD="development"
    fi
    
    echo -e "${BLUE}üìã Export method: $EXPORT_METHOD${NC}"
    
    # ExportOptions.plist olu≈ütur
    cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>$EXPORT_METHOD</string>
    <key>teamID</key>
    <string>$TEAM_ID</string>
    <key>compileBitcode</key>
    <false/>
    <key>signingStyle</key>
    <string>automatic</string>
    <key>stripSwiftSymbols</key>
    <true/>
</dict>
</plist>
EOF
    
    echo -e "${GREEN}‚úÖ ExportOptions.plist olu≈üturuldu${NC}"
    
    # Archive olu≈ütur
    cd ios
    echo -e "${YELLOW}üî® Archive olu≈üturuluyor...${NC}"
    xcodebuild -workspace KuponCepte.xcworkspace \
               -scheme KuponCepte \
               -configuration Release \
               -archivePath ./build/KuponCepte.xcarchive \
               -allowProvisioningUpdates \
               -allowProvisioningDeviceRegistration \
               archive \
               DEVELOPMENT_TEAM=$TEAM_ID \
               -quiet
    
    # IPA export
    echo -e "${YELLOW}üì¶ IPA export ediliyor...${NC}"
    xcodebuild -exportArchive \
               -archivePath ./build/KuponCepte.xcarchive \
               -exportOptionsPlist ./ExportOptions.plist \
               -exportPath ./build/ \
               -allowProvisioningUpdates \
               -quiet
    cd ..
    
    # IPA dosyasƒ±nƒ± bul ve kopyala
    IPA_PATH="ios/build/KuponCepte.ipa"
    if [ -f "$IPA_PATH" ]; then
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        OUTPUT_NAME="KuponCepte_${BUILD_PROFILE}_${TIMESTAMP}.ipa"
        cp "$IPA_PATH" "./$OUTPUT_NAME"
        echo -e "${GREEN}‚úÖ IPA ba≈üarƒ±yla olu≈üturuldu: $OUTPUT_NAME${NC}"
    else
        echo -e "${RED}‚ùå IPA dosyasƒ± bulunamadƒ±: $IPA_PATH${NC}"
        exit 1
    fi
    
else
    # EAS cloud build
    echo -e "${YELLOW}‚òÅÔ∏è  EAS cloud build ba≈ülatƒ±lƒ±yor...${NC}"
    
    if [ "$BUILD_PROFILE" = "development" ]; then
        eas build --platform ios --profile development
    else
        eas build --platform ios --profile $BUILD_PROFILE
    fi
fi

# Build tamamlandƒ±
echo -e "${GREEN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë            BUILD TAMAMLANDI            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

if [ "$BUILD_TYPE" = "simulator" ]; then
    echo -e "${GREEN}üì± Simulator app dosyanƒ±z hazƒ±r: $OUTPUT_NAME${NC}"
    echo -e "${BLUE}üí° Bu dosyayƒ± iOS Simulator'da √ßalƒ±≈ütƒ±rabilirsiniz.${NC}"
    echo -e "${YELLOW}üîß Simulator'da √ßalƒ±≈ütƒ±rmak i√ßin:${NC}"
    echo "   xcrun simctl install booted $OUTPUT_NAME"
    
elif [ "$BUILD_METHOD" = "local" ]; then
    echo -e "${GREEN}üì± IPA dosyanƒ±z hazƒ±r: $OUTPUT_NAME${NC}"
    echo -e "${BLUE}üí° Bu IPA'yƒ± TestFlight veya AdHoc distribution ile payla≈üabilirsiniz.${NC}"
    
    # Dosya boyutunu g√∂ster
    if [ -f "$OUTPUT_NAME" ]; then
        FILE_SIZE=$(ls -lh "$OUTPUT_NAME" | awk '{print $5}')
        echo -e "${YELLOW}üìè Dosya boyutu: $FILE_SIZE${NC}"
    fi
    
    # Distribution √∂nerileri
    echo -e "${BLUE}üí° ƒ∞pucu: IPA'yƒ± TestFlight'a y√ºkleyebilir veya AdHoc cihazlara y√ºkleyebilirsiniz.${NC}"
    
else
    echo -e "${GREEN}üì± IPA dosyanƒ±z EAS dashboard'ta hazƒ±r olacak.${NC}"
    echo -e "${BLUE}üåê EAS dashboard'u a√ßmak i√ßin: eas build:list${NC}"
    echo -e "${BLUE}üí° Build tamamlandƒ±ƒüƒ±nda size e-posta gelecek.${NC}"
fi

echo -e "${YELLOW}üìã Test i√ßin notlar:${NC}"
if [ "$BUILD_TYPE" = "simulator" ]; then
    echo "‚Ä¢ M1/M2 Mac'te iOS Simulator'da √ßalƒ±≈üƒ±r"
    echo "‚Ä¢ Ger√ßek cihazda √ßalƒ±≈ütƒ±rmak i√ßin device build gerekir"
else
    echo "‚Ä¢ IPA dosyasƒ± iOS 12+ cihazlarda √ßalƒ±≈üƒ±r"
    echo "‚Ä¢ TestFlight veya AdHoc distribution gerekir"
    echo "‚Ä¢ Cihazƒ±n UDID'sinin developer hesabƒ±na ekli olmasƒ± gerekir"
fi
echo "‚Ä¢ Test sƒ±rasƒ±nda feedback toplamayƒ± unutmayƒ±n"

echo -e "${BLUE}üéâ ƒ∞yi testler!${NC}"
